# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FIrxn1Ms5TZg_GBolIUzQ87THUgUlrSi
"""

# bibliotecas
from sklearn.preprocessing import StandardScaler
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import Normalizer
from sklearn.neighbors import KNeighborsClassifier

# Importing the dataset
data = pd.read_csv('Video_Games_Sales_as_at_22_Dec_2016.csv', usecols = ["Global_Sales", "Name", "Platform", "Year_of_Release", "Genre", "NA_Sales", "EU_Sales", "JP_Sales", "Other_Sales"],squeeze = True)

# Contains replacement values for missing data
fill_vals = {
    'Year_of_Release': 0,
    'Genre': 'NA',
    'Platform': 'NA'
}

data = data.fillna(value=fill_vals)

# One Hot Encoding
data = pd.get_dummies(data)

X = data[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]
X
y = data.iloc[:, 1].values
y = pd.get_dummies(y, drop_first=True)
y

print(data)

# dividir dados em treinamento e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# realizar pré-processamento adicional, se necessário
# Exemplo: normalizar ou padronizar as características usando StandardScaler

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# instanciar modelo de regressão KNN
model = KNeighborsClassifier()

# treinar modelo utilizando conjunto de treinamento
model.fit(X_train, y_train)

# avaliar modelo utilizando conjunto de teste
score = model.score(X_test, y_test)

print("Score do modelo KNN:", score)

# realizar previsões com o modelo treinado
y_pred = model.predict(X_test)

precisao = str(round(model.score(X_test,y_test) * 100, 2))+"%"
# imprimindo o resultado
print("A acurácia do modelo k-NN foi",precisao)
# predizendo o teste
y_pred = model.predict(X_test)

# remover warnings
import warnings
warnings.filterwarnings("ignore")

# normalizando
scaler = Normalizer()
scaler.fit(X)
X = scaler.transform(X)
scores = []
for i in range(1000):
  X_train, X_test, y_train, y_test = train_test_split(X,y)
  model = KNeighborsClassifier()
  model.fit(X_train,y_train)
  precisao = model.score(X_test,y_test)
  scores.append(precisao)
print("Média: {:.2f}%".format(np.mean(scores)*100))
print("Desvio padrão: {:.2f}%".format(np.std(scores)*100))
import matplotlib.pyplot as plt
import seaborn as sns
sns.distplot(scores)
plt.yticks([])
plt.title("Acurácias do k-NN")
plt.show()